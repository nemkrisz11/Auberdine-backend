version: '3'
services:
  flask:
    build:
      context: flaskapp
      dockerfile: Dockerfile
    container_name: flask
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "True"
      APP_PORT: 5000
      MONGODB_DATABASE: flaskdb
      MONGODB_USERNAME: flaskuser
      MONGODB_PASSWORD: flaskpass
      MONGODB_HOSTNAME: mongodb
      MONGODB_PORT: 27017
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodbuser
      MONGO_INITDB_ROOT_PASSWORD: klqhweroiudslfkjqweilru234
      MONGO_INITDB_DATABASE: flaskdb
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodata:/data/db
      - ./mongoinit:/docker-entrypoint-initdb.d/:ro
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local